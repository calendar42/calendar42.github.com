[
{
	"uri": "/bigpicture/",
	"title": "The big picture",
	"tags": [],
	"description": "",
	"content": " Glossary Keywords : Rideshare, Travel-intent-pattern, Travel-intent\nTravel-intent Travel intent is a \u0026lsquo;desire to move from A to B in a with a time window placed on either the departure or the arrival\u0026rsquo;. You can either create your own travel-intent or you can let a travel-intent-pattern generate it for you.\nExample 1: User wants to arrive at work between 08:00 - 08:30. He/she can drive. So conceptually he/she can be a passenger or a driver. We can create our Travel-intent as follows: .... \u0026quot;arrival_time\u0026quot;: { \u0026quot;max\u0026quot;: \u0026quot;2016-07-29T08:30:00Z\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;2016-07-29T08:00:00Z\u0026quot; }, \u0026quot;as_driver\u0026quot; : true, \u0026quot;as_passenger\u0026quot; : true ...  Example 2: User wants to leave the work between 17:00 - 17:30. He/she can\u0026rsquo;t drive. So he/she can only be a passenger. We can create our travel-intent as follows ... \u0026quot;departure_time\u0026quot;: { \u0026quot;max\u0026quot;: \u0026quot;2016-07-29T17:30:00Z\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;2016-07-29T17:00:00Z\u0026quot; }, \u0026quot;as_driver\u0026quot; : false, \u0026quot;as_passenger\u0026quot; : true ...  Travel-intent-pattern It declares a pattern of intents with specific parameters. For example if a user has to be at work every weekdays between 08:00 - 08:30. Instead of creating 5 different travel-intents, we can create a travel-intent-pattern with the following parameters:\n... \u0026quot;propagation_period\u0026quot;: 604800, /* One week in seconds */ \u0026quot;effective_date\u0026quot;: \u0026quot;2016-07-29T10:11:18Z\u0026quot;, /* This pattern is active from this date.*/ \u0026quot;rrule\u0026quot;: \u0026quot;FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR,SA,SU\u0026quot;, /* Every week, MO,TU,WE,TH,FR,SA,SU.*/ \u0026quot;departure_time\u0026quot;: { \u0026quot;max\u0026quot;: \u0026quot;11:00:00\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;09:00:00\u0026quot; } ...  Rideshare When two travel intents fulfill conditions set by the back end, the pair are considered to be a match. That means the 2 users represented by the 2 intents should share that ride. We then generate a rideshare which merges the information from the 2 intents into one entity. This new entity is called a rideshare. You can NOT create a rideshare by itself. However you can create 2 similar intents in a community and the system will automatically generate a rideshare from the 2 intents.\nAfter rideshare is created, we have to know which user is passenger and which user is the driver. Our system will assign user_ids as a passenger_id and driver_id according to their part in the rideshare.\nFIRST PIC There is a Pattern in travel - Driver A has to be at work between 09:00 - 09:15 every weekdays - Driver B has to be at work between 08:45 - 09:00 / THU, FRI - Passenger C has to be at work between 09:00 - 09:15 / THU,FRI\nNot everybody can drive - There are drivers - There are passengers\nSECOND PIC Travel Intent patterns create travel-intents - Driver A has to be at work between 09:00 - 09:15 every weekdays: - System automatically creates 5 separate individual travel intents. - This intents will be used for rideshare matching system - Travel intents can be created separately as well\nTHIRD PIC Matched travel intents will be suggested - All rideshares will have a score between 0-1. - Scoring system is a calculation of multiple factors which came from travel intents. - Best suggestion for a user is the suggestion that has highest score.\nState Diagram How rideshare suggestions will be accepted by users - When a rideshare born, its state will be new. - When rideshare is in new state; driver or passenger can accept or decline. If one of them declines in any situation, rideshare is declined and will be deleted. - If both users are accept the rideshare, the rideshare is accepted.\n"
},
{
	"uri": "/walkthrough/",
	"title": "Walkthrough",
	"tags": [],
	"description": "",
	"content": " IMPORTANT All request headers must contain apikey field.\nGetting api-key To get an api-key, you have to sign-up in our developer portal.\nYou can request a developer api-key through email.\nScenario: Lets say, there are 3 people who each own a car. All of them want to arrive at work at the same location at the same time. However, their homes are far away from each other. Our system will find the best match between all their travel-intents and create rideshares. Ideally all of them will have 2 rideshare options each. After the rideshares are created, users who are declared by driver_id and passenger_id should accept the rideshare. (You can see the rideshare state flow in the rideshare/states).\nSet up and update the travel intents to get a successful rideshare. There are 3 drivers who want to arrive to work at the same time. Depending on their geological points they will be matched to share a ride and a rideshare will be generated.\nPOST: https://dev04.c42.io/api/travel-intent/v1/travel-intent/\n{ \u0026quot;user_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;user_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;community_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;community_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;departure_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: \u0026quot;52.011021\u0026quot;, \u0026quot;longitude\u0026quot;:\u0026quot;4.336688\u0026quot; }, \u0026quot;arrival_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: \u0026quot;52.165051\u0026quot;, \u0026quot;longitude\u0026quot;:\u0026quot;4.500659\u0026quot; }, \u0026quot;extra\u0026quot;: {\u0026quot;This intent is from\u0026quot;:\u0026quot;driver\u0026quot;}, \u0026quot;timezone\u0026quot;: \u0026quot;Europe/Amsterdam\u0026quot;, \u0026quot;as_driver\u0026quot;:true, \u0026quot;as_passenger\u0026quot;:true, \u0026quot;arrival_time\u0026quot;: { \u0026quot;max\u0026quot;: \u0026quot;2016-10-24T20:31:19.073Z\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;2016-10-24T19:31:19.072Z\u0026quot; } }  { \u0026quot;user_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;user_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;community_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;community_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;departure_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: \u0026quot;52.016475\u0026quot;, \u0026quot;longitude\u0026quot;:\u0026quot;4.363224\u0026quot; }, \u0026quot;arrival_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: \u0026quot;52.165051\u0026quot;, \u0026quot;longitude\u0026quot;:\u0026quot;4.500659\u0026quot; }, \u0026quot;extra\u0026quot;: {\u0026quot;This intent is from\u0026quot;:\u0026quot;driver2\u0026quot;}, \u0026quot;timezone\u0026quot;: \u0026quot;Europe/Amsterdam\u0026quot;, \u0026quot;as_driver\u0026quot;:true, \u0026quot;as_passenger\u0026quot;:true, \u0026quot;arrival_time\u0026quot;: { \u0026quot;max\u0026quot;: \u0026quot;2016-10-24T20:31:19.073Z\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;2016-10-24T19:31:19.072Z\u0026quot; } }  { \u0026quot;user_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;user_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;community_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;community_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;departure_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: \u0026quot;52.051067\u0026quot;, \u0026quot;longitude\u0026quot;:\u0026quot;4.406224\u0026quot; }, \u0026quot;arrival_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: \u0026quot;52.165051\u0026quot;, \u0026quot;longitude\u0026quot;:\u0026quot;4.500659\u0026quot; }, \u0026quot;extra\u0026quot;: {\u0026quot;This intent is from\u0026quot;:\u0026quot;driver3\u0026quot;}, \u0026quot;timezone\u0026quot;: \u0026quot;Europe/Amsterdam\u0026quot;, \u0026quot;as_driver\u0026quot;:true, \u0026quot;as_passenger\u0026quot;:true, \u0026quot;arrival_time\u0026quot;: { \u0026quot;max\u0026quot;: \u0026quot;2016-10-24T20:31:19.073Z\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;2016-10-24T19:31:19.072Z\u0026quot; } }   Get generated rideshares for all drivers  GET: https://dev04.c42.io/api/rideshare/v1/rideshare/?driver_id={{driver_id}}\nGET: https://dev04.c42.io/api/rideshare/v1/rideshare/?driver_id={{driver_id2}}\nGET: https://dev04.c42.io/api/rideshare/v1/rideshare/?driver_id={{driver_id3}}\n Accept the rideshares  Driver accepts:\n{ \u0026quot;user_id\u0026quot;: \u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;action\u0026quot;: \u0026quot;accept\u0026quot; }  Passenger accepts:\n{ \u0026quot;user_id\u0026quot;: \u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;action\u0026quot;: \u0026quot;accept\u0026quot; }  Up to this point we were be able to - Create travel-intent\u0026rsquo;s - Get rideshare suggestions - Accept the rideshares\nNow lets say, we already know this scenario will keep happening all the days of the week for all the users. Instead of creating all the travel intents one by one, we can create travel_intent_patterns and let our system generate all travel-intents for us.\nCreate a travel intent pattern for a user. POST: https://dev04.c42.io/api/travel-intent-pattern/v1/travel-intent-pattern/\nBODY:\n{ \u0026quot;user_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;user_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;community_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;community_id\u0026quot;:\u0026quot;your-generated-version-4-UUID\u0026quot;, \u0026quot;departure_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: 52.085165, \u0026quot;longitude\u0026quot;: 5.116112 }, \u0026quot;arrival_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: 52.334198, \u0026quot;longitude\u0026quot;: 4.859670 }, \u0026quot;timezone\u0026quot;: \u0026quot;Europe/Amsterdam\u0026quot;, \u0026quot;extra\u0026quot;: {\u0026quot;This works\u0026quot;:\u0026quot;Well in the pattern API μService\u0026quot;}, \u0026quot;as_driver\u0026quot;:true, \u0026quot;as_passenger\u0026quot;:true, \u0026quot;effective_date\u0026quot;:\u0026quot;2016-07-29T10:11:18\u0026quot;, \u0026quot;rrule\u0026quot;: \u0026quot;FREQ=WEEKLY;BYDAY=MO,TU\u0026quot;, \u0026quot;propagation_period\u0026quot;:604800, \u0026quot;propagated_until\u0026quot;: null, \u0026quot;arrival_time\u0026quot;: { \u0026quot;max\u0026quot;: \u0026quot;11:00:00\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;09:00:00\u0026quot; }, \u0026quot;departure_time\u0026quot;: null }  RESPONSE:\n{ \u0026quot;meta_data\u0026quot;: {}, \u0026quot;data\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;73678a72-8764-4259-aff0-ffbefb6b2709\u0026quot;, \u0026quot;departure_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: 52.085165, \u0026quot;longitude\u0026quot;: 5.116112 }, \u0026quot;arrival_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: 52.334198, \u0026quot;longitude\u0026quot;: 4.85967 }, \u0026quot;current_state\u0026quot;: \u0026quot;new\u0026quot;, \u0026quot;old_state\u0026quot;: \u0026quot;empty\u0026quot;, \u0026quot;user_id\u0026quot;: \u0026quot;ae228334-9d73-4971-8091-102c8ad85ed8\u0026quot;, \u0026quot;community_id\u0026quot;: \u0026quot;66f7b084-276d-444f-a376-b026a54e5b81\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2016-10-24T12:19:53.902747Z\u0026quot;, \u0026quot;modified\u0026quot;: \u0026quot;2016-10-24T12:19:53.902770Z\u0026quot;, \u0026quot;as_driver\u0026quot;: true, \u0026quot;as_passenger\u0026quot;: true, \u0026quot;timezone\u0026quot;: \u0026quot;Europe/Amsterdam\u0026quot;, \u0026quot;extra\u0026quot;: { \u0026quot;This works\u0026quot;: \u0026quot;if you want to send extra data along with post\u0026quot; }, \u0026quot;propagation_period\u0026quot;: 604800, \u0026quot;propagated_until\u0026quot;: null, \u0026quot;effective_date\u0026quot;: \u0026quot;2016-07-29T10:11:18Z\u0026quot;, \u0026quot;rrule\u0026quot;: \u0026quot;FREQ=WEEKLY;BYDAY=MO,TU\u0026quot;, \u0026quot;arrival_time\u0026quot;: { \u0026quot;max\u0026quot;: \u0026quot;11:00:00\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;09:00:00\u0026quot; } } ] }  Get your generated travel intents by querying travel-intent endpoint GET: https://dev04.c42.io/api/travel-intent/v1/travel-intent/?pattern_id=73678a72-8764-4259-aff0-ffbefb6b2709\nRESPONSE:\n{ \u0026quot;meta_data\u0026quot;: { \u0026quot;count\u0026quot;: 2, /*you have two travel intents because rrule is MO,TU*/ \u0026quot;limit\u0026quot;: 10, \u0026quot;offset\u0026quot;: 0 }, \u0026quot;data\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;92e9d205-90a5-445f-9f13-c08eb20779a4\u0026quot;, \u0026quot;departure_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: 52.085165, \u0026quot;longitude\u0026quot;: 5.116112 }, \u0026quot;arrival_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: 52.334198, \u0026quot;longitude\u0026quot;: 4.85967 }, \u0026quot;current_state\u0026quot;: \u0026quot;new\u0026quot;, \u0026quot;old_state\u0026quot;: \u0026quot;empty\u0026quot;, \u0026quot;user_id\u0026quot;: \u0026quot;ae228334-9d73-4971-8091-102c8ad85ed8\u0026quot;, \u0026quot;community_id\u0026quot;: \u0026quot;66f7b084-276d-444f-a376-b026a54e5b81\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2016-10-24T12:19:54.037493Z\u0026quot;, \u0026quot;modified\u0026quot;: \u0026quot;2016-10-24T12:19:54.037517Z\u0026quot;, \u0026quot;as_driver\u0026quot;: true, \u0026quot;as_passenger\u0026quot;: true, \u0026quot;extra\u0026quot;: { \u0026quot;This works\u0026quot;: \u0026quot;if you want to send extra data along with post\u0026quot; }, \u0026quot;travel_time\u0026quot;: 2945.03455714128, \u0026quot;travel_distance\u0026quot;: 32722.6061904587, \u0026quot;pattern_id\u0026quot;: \u0026quot;73678a72-8764-4259-aff0-ffbefb6b2709\u0026quot;, \u0026quot;departure_time\u0026quot;: { \u0026quot;max\u0026quot;: \u0026quot;2016-10-25T09:00:00.000000Z\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;2016-10-25T07:00:00.000000Z\u0026quot; } }, { \u0026quot;id\u0026quot;: \u0026quot;46bb9ffe-2bbc-444d-977f-0f0e70b4b3ad\u0026quot;, \u0026quot;departure_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: 52.085165, \u0026quot;longitude\u0026quot;: 5.116112 }, \u0026quot;arrival_geo_point\u0026quot;: { \u0026quot;latitude\u0026quot;: 52.334198, \u0026quot;longitude\u0026quot;: 4.85967 }, \u0026quot;current_state\u0026quot;: \u0026quot;new\u0026quot;, \u0026quot;old_state\u0026quot;: \u0026quot;empty\u0026quot;, \u0026quot;user_id\u0026quot;: \u0026quot;ae228334-9d73-4971-8091-102c8ad85ed8\u0026quot;, \u0026quot;community_id\u0026quot;: \u0026quot;66f7b084-276d-444f-a376-b026a54e5b81\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2016-10-24T12:19:54.106563Z\u0026quot;, \u0026quot;modified\u0026quot;: \u0026quot;2016-10-24T12:19:54.106585Z\u0026quot;, \u0026quot;as_driver\u0026quot;: true, \u0026quot;as_passenger\u0026quot;: true, \u0026quot;extra\u0026quot;: { \u0026quot;This works\u0026quot;: \u0026quot;Well in the pattern API μService\u0026quot; }, \u0026quot;travel_time\u0026quot;: 2945.03455714128, \u0026quot;travel_distance\u0026quot;: 32722.6061904587, \u0026quot;pattern_id\u0026quot;: \u0026quot;73678a72-8764-4259-aff0-ffbefb6b2709\u0026quot;, \u0026quot;departure_time\u0026quot;: { \u0026quot;max\u0026quot;: \u0026quot;2016-10-31T10:00:00.000000Z\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;2016-10-31T08:00:00.000000Z\u0026quot; } } ] }  "
},
{
	"uri": "/apibehaviour/",
	"title": "Api behaviour Notes",
	"tags": [],
	"description": "",
	"content": "There are some important notes to take it in a consideration when you are working with our travel matching API.\n Driver can only pick one passenger.\n There is no drop-off location. Passenger and driver must go to the same place.\n Our endpoints is not named in usual way eg. /api/travel-intent-pattern/v1/travel-intent-pattern/\n Don\u0026rsquo;t use same value for driver_id \u0026amp; passenger_id when filtering rideshare.\nExample: rideshare/v1/rideshare/?driver_id=samething\u0026amp;passenger_id=samething wont work\n Rideshares can occur between communities. Thus in each rideshare entity, there is driver_community_id and passenger_community_id\n You can NOT create a rideshare by itself. Thus you can\u0026rsquo;t make a POST request to rideshare/v1/rideshare/\n  "
},
{
	"uri": "/statuscodes/",
	"title": "Status Codes",
	"tags": [],
	"description": "",
	"content": " 200 - OK Everything worked as expected.\n201 - No Content Created an Entity and everything worked as expected.\n204 - No Content Deleted an Entity and everything worked as expected.\n400 Bad request  Missing a required parameter\n{ \u0026quot;user_id\u0026quot;: [ \u0026quot;This field is required.\u0026quot; ], \u0026quot;status_code\u0026quot;: 400 }  Wrong value for a parameter\n{ \u0026quot;user_id\u0026quot;: [ \u0026quot;\\\u0026quot;loremipsum\\\u0026quot; is not a valid UUID.\u0026quot; ], \u0026quot;status_code\u0026quot;: 400 }  Supplied both of the interchangeable params (arrival_time \u0026amp; departure_time)\n{ \u0026quot;non_field_errors\u0026quot;: [ \u0026quot;Invalid: Only arrival or departure min or max times can be defined\u0026quot; ], \u0026quot;status_code\u0026quot;: 400 }  Made a request against our system logic check State Diagram:\nTrying to accept a rideshare after its been declined:\n{ \u0026quot;status_code\u0026quot;: 400, \u0026quot;detail\u0026quot;: \u0026quot;Can't trigger event accept from state declined!\u0026quot; }   401 Unauthorized apikey field must be present in all requests.\n{ \u0026quot;message\u0026quot;: \u0026quot;No API Key found in headers, body or querystring\u0026quot; }  404 - Not Found  Hit an non-existent url\n{ \u0026quot;request_path\u0026quot;: \u0026quot;/api/rideshare-lorem/v1/rideshare/\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;API not found with these values\u0026quot;, \u0026quot;request_host\u0026quot;: [ \u0026quot;dev04.c42.io\u0026quot; ] }  Trying to delete an entity that doesn\u0026rsquo;t exist (DELETE /rideshare/v1/rideshare/loremipsum)\n{ \u0026quot;status_code\u0026quot;: 404, \u0026quot;detail\u0026quot;: \u0026quot;Not found.\u0026quot; }   500, 502, 503, 504 - Server Errors Something went wrong on Calendar42\u0026rsquo;s end.\n"
},
{
	"uri": "/changenotes/",
	"title": "Change Notes",
	"tags": [],
	"description": "",
	"content": "  We use semantic versioning.\n 0.0.6 • 2016-08-24  Added Rideshare Action endpoint as real endpoint.  0.0.5 • 2016-08-05  Added Rideshare endpoint as real endpoint.  0.0.5 • 2016-07-27  Added Travel Intent endpoint as real endpoint.  0.0.4 • 2016-07-18  Added Travel Intent Pattern endpoint as real endpoint.  0.0.3 • 2016-07-01  Added /rideshare-suggestions/{id}/actions endpoint to trigger state changes on RideShareSuggestions:  The Rideshare Suggestion Action endpoint allows to report an action taken by a related user: Either \u0026ldquo;ACCEPTED\u0026rdquo; or \u0026ldquo;REJECTED\u0026rdquo;. Based on actor, action and current state of the Suggestion different State Transitions can occur  Added propagated_until (readOnly, date-time) and propagation_period (seconds) on the TravelIntentPattern in order to define when was the last time it was propagated and how long to propagate it to Added new_state and old_state to all entities  0.0.2 • 2016-06-29  Made the TravelIntentPattern a seperate entity and endpoint (instead of embedding it in Travel Intent) Changed the format of any user_id to be uuid instead of email Added created \u0026amp; modified to each model (format: date-time)  0.0.1 • 2016-06-25  Initial version  "
},
{
	"uri": "/_header/",
	"title": "C42 Docs",
	"tags": [],
	"description": "",
	"content": "C42 Documentation\n"
},
{
	"uri": "/",
	"title": "C42 Documentation",
	"tags": [],
	"description": "",
	"content": " Raison d\u0026rsquo;être To expose the power of our travel matching system.\nOrganization The documentation is divided into major thematic sections, each a collection of pages devoted to that theme.\n         The Big Picture The base knowledge of how our system works. How everything is connected and the use cases.   Walkthrough Quick tutorial with end-points. At the end of this tutorial you will be able to create your own rideshare ecosystem.   API Behaviour Notes  Very important details about Our API that you should learn before creating any complex applications.   API All the endpoints of our system. You can see all the possible params you can send and responses you can receive.    Learning path  We recommend you to see The Big Picture before starting anything. You can see how our system operates. Also to not get confused in calling API endpoints, its good to learn the what is a rideshare, travel-intent-pattern and travel-intent.\n Walkthrough is the \u0026lsquo;Hello World\u0026rsquo; of our system. You can grasp more deeply our concept with the help of the responses and queries. It briefly shows the use case of our system.\n API Behaviour Notes is the important points that you should learn before you dive in to API endpoints.\n You can find all end-points, parameters, filters and possible responses in API section.\n  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]